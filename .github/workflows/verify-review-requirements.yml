name: Verify Review Requirements

permissions:
  pull-requests: read

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  verify-ownership-of-changed-files:
    runs-on: ubuntu-latest
    steps:
    - name: Check out the repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.REPO_TOKEN }}

    - name: Get PR creator and their teams in org
      id: get-pr-creator-and-teams
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.REPO_TOKEN }}
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number,
          })

          const query = `
            query UsersTeamsInOrg($org: String!, $userLogins: [String!]!) {
              organization(login: $org) {
                teams(first: 100, userLogins: $userLogins) {
                  nodes {
                    name
                  }
                }
              }
            }
          `
          const variables = {
            org: context.repo.owner,
            userLogins: [pr.user.login],
          }
          const result = await github.graphql(query, variables)
          const teams = result?.organization?.teams?.nodes?.map(node => `@${context.repo.owner}/${node.name}`) || []

          return { prCreator: pr.user.login, prCreatorTeams: teams }

    - name: Get CODEOWNERS content
      id: get-codeowners
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.REPO_TOKEN }}
        script: |
          const { data: content } = await github.rest.repos.getContent({
            owner: context.repo.owner,
            repo: context.repo.repo,
            path: 'CODEOWNERS',
            ref: context.payload.pull_request.head.sha,
          })
          const codeownersContent = Buffer.from(content.content, 'base64').toString()

          return { codeownersContent }

    - name: Get PR review approvals
      id: get-approvals
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.REPO_TOKEN }}
        script: |
          const { data: reviews } = await github.rest.pulls.listReviews({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number,
          })
          const approvedReviews = reviews.filter(review => review.state === 'APPROVED')
          const approvals = approvedReviews.map(review => review.user.login)

          return { approvals }

    - name: Check changed files against CODEOWNERS and the result against PR creator and their teams
      uses: actions/github-script@v7
      env:
        PR_CREATOR_AND_TEAMS_JSON: ${{ steps.get-pr-creator-and-teams.outputs.result }}
        CODEOWNERS_JSON: ${{ steps.get-codeowners.outputs.result }}
        APPROVALS_JSON: ${{ steps.get-approvals.outputs.result }}
      with:
        github-token: ${{ secrets.REPO_TOKEN }}
        script: |
          const findOwners = require('.github/lib/find-owners')
          const parseCodeowners = require('.github/lib/parse-codeowners')
          const { prCreator, prCreatorTeams } = JSON.parse(process.env.PR_CREATOR_AND_TEAMS_JSON)
          const { codeownersContent } = JSON.parse(process.env.CODEOWNERS_JSON)
          const { approvals } = JSON.parse(process.env.APPROVALS_JSON)

          const { data: changedFiles } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number,
          })

          const patterns = parseCodeowners(codeownersContent)
          const unauthorizedChanges = []

          changedFiles.forEach(file => {
            const owners = findOwners(file.filename, patterns)

            owners.forEach(owner => {
              if (owner.startsWith('@')) {
                const team = owner.slice(1)
                if (!prCreatorTeams.includes(team)) {
                  unauthorizedChanges.push(file.filename)
                }
              } else if (owner !== prCreator) {
                unauthorizedChanges.push(file.filename)
              }
            })
          })

          if (unauthorizedChanges.length > 0) {
            core.setFailed(`Unauthorized changes found in the following files: ${unauthorizedChanges.join(', ')}`)
          }
