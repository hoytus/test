name: Verify Review Requirements

permissions:
  pull-requests: read

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]

jobs:
  verify-ownership-of-changed-files:
    runs-on: ubuntu-latest
    steps:
    - name: Check out the repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.REPO_TOKEN }}

    - name: Get PR creator and their teams in org
      id: get-pr-creator-and-teams
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.REPO_TOKEN }}
        script: |
          const getTeams = require('.github/lib/get-teams')

          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number,
          })

          const teams = await getTeams(context, github, [pr.user.login])

          return { prCreator: pr.user.login, prCreatorTeams: teams }

    - name: Get CODEOWNERS content
      id: get-codeowners
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.REPO_TOKEN }}
        script: |
          const { data: content } = await github.rest.repos.getContent({
            owner: context.repo.owner,
            repo: context.repo.repo,
            path: 'CODEOWNERS',
            ref: context.payload.pull_request.head.sha,
          })
          const codeownersContent = Buffer.from(content.content, 'base64').toString()

          return { codeownersContent }

    - name: Get PR review approvals
      id: get-approvals
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.REPO_TOKEN }}
        script: |
          const getTeams = require('.github/lib/get-teams')

          const { data: reviews } = await github.rest.pulls.listReviews({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number,
          })
          const approvedReviews = reviews.filter(review => review.state === 'APPROVED')
          const approvals = approvedReviews.map(review => review.user.login)
          const approversTeams = await getTeams(context, github, approvals)
          console.log('Approvals:', approvals)
          console.log('Approvers Teams:', approversTeams)

          return { approvals, approversTeams }

    - name: Check changed files against CODEOWNERS and the result against PR creator and their teams
      uses: actions/github-script@v7
      env:
        PR_CREATOR_AND_TEAMS_JSON: ${{ steps.get-pr-creator-and-teams.outputs.result }}
        CODEOWNERS_JSON: ${{ steps.get-codeowners.outputs.result }}
        APPROVALS_JSON: ${{ steps.get-approvals.outputs.result }}
      with:
        github-token: ${{ secrets.REPO_TOKEN }}
        script: |
          const findOwners = require('.github/lib/find-owners')
          const parseCodeowners = require('.github/lib/parse-codeowners')
          const { prCreator, prCreatorTeams } = JSON.parse(process.env.PR_CREATOR_AND_TEAMS_JSON)
          const { codeownersContent } = JSON.parse(process.env.CODEOWNERS_JSON)
          const { approvals, approversTeams } = JSON.parse(process.env.APPROVALS_JSON)
          const patterns = parseCodeowners(codeownersContent)

          console.log('PR Creator:', prCreator)
          console.log('PR Creator Teams:', prCreatorTeams)
          console.log('Codeowners Patterns:', patterns)
          console.log('Approvals:', approvals)
          console.log('Approvers Teams:', approversTeams)

          const { data: changedFiles } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number,
          })

          console.log('Changed Files:', changedFiles.map(file => file.filename))

          const unauthorizedChanges = []

          changedFiles.forEach(file => {
            console.log('Checking file:', file.filename)

            const owners = findOwners(file.filename, patterns)
            console.log('Owners for file:', file.filename, owners)

            // If there are no owners, consider the file approved
            if (owners.length === 0) {
              console.log(`No owners found for file: ${file.filename}. Automatically approved.`)
              return
            }

            const approved = owners.some(owner => {
              console.log('Checking owner:', owner)

              // Check if the owner is a team
              if (owner.startsWith('@')) {
                // If there are approvals, check if any of the approvers' teams match the owner
                if (approvals.length > 0) {
                  const teamMatch = approversTeams.includes(owner)
                  console.log('Is team approved:', owner, teamMatch)
                  return teamMatch
                } else {
                  console.log('No approvals, skipping team check for:', owner)
                  return false
                }
              }

              // Check if the owner is the PR creator or if they are in the approvals list
              const individualMatch = owner === prCreator || approvals.includes(owner)
              console.log('Is individual approved:', owner, individualMatch)
              return individualMatch
            })

            console.log('Is file approved:', file.filename, approved)

            if (!approved) {
              unauthorizedChanges.push(file.filename)
            }
          })

          if (unauthorizedChanges.length > 0) {
            console.log('Unauthorized changes found:', unauthorizedChanges)
            core.setFailed(`Unauthorized changes found in the following files: ${unauthorizedChanges.join(', ')}`)
          } else {
            console.log('All changes are authorized.')
          }
